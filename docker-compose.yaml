
services:
  traefik:
    image: traefik:v2.9
    command:
      - "--providers.docker=true"
      - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--api=true"
      - "--api.insecure=true" # This allows dashboard without defining a custom router
      - "--entrypoints.web.address=:80"
      - "--entrypoints.traefik.address=:8080"
    ports:
      - "80:80"       # Map port 80 for HTTP traffic
      - "8080:8080"   # Expose port 8080 for Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # Access Docker socket
    networks:
      - app-network

  dynamodb:
    image: amazon/dynamodb-local:latest
    volumes:
      - ./dynamodb-data:/data  # Optional: Persist data to local directory
    command: -jar DynamoDBLocal.jar -sharedDb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dynamodb.rule=PathPrefix(`/dynamodb`)"
      - "traefik.http.routers.dynamodb.entrypoints=web"
      - "traefik.http.routers.dynamodb.middlewares=dynamodb-stripprefix"
      - "traefik.http.middlewares.dynamodb-stripprefix.stripprefix.prefixes=/dynamodb"
      - "traefik.http.services.dynamodb.loadbalancer.server.port=8000"  # Internal port of DynamoDB Local
    networks:
      - app-network

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin  # Docker image for DynamoDB Admin
    environment:
      - AWS_REGION=eu-west-1
      - AWS_ACCESS_KEY_ID=local
      - AWS_SECRET_ACCESS_KEY=local
      - DYNAMO_ENDPOINT=http://dynamodb:8000  # Connection to DynamoDB Local
    depends_on:
      - dynamodb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dynamodb-admin.rule=PathPrefix(`/dbadmin`)"
      - "traefik.http.routers.dynamodb-admin.entrypoints=web"
      - "traefik.http.routers.dynamodb-admin.middlewares=dynamodb-admin-stripprefix"
      - "traefik.http.middlewares.dynamodb-admin-stripprefix.stripprefix.prefixes=/dbadmin"
      - "traefik.http.services.dynamodb-admin.loadbalancer.server.port=8001"  # Internal port of the container
    networks:
      - app-network

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3001
      - AWS_ENDPOINT_URL=http://dynamodb:8000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      - dynamodb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.middlewares=auth-stripprefix"
      - "traefik.http.middlewares.auth-stripprefix.stripprefix.prefixes=/auth"
      - "traefik.http.services.auth.loadbalancer.server.port=3001"
    networks:
      - app-network
    volumes:
      - ./auth:/app
      - /app/node_modules
    command: npm run start:dev

  agentrouter:
    build:
      context: ./agentrouter
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3002
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agentrouter.rule=PathPrefix(`/agents`)"
      - "traefik.http.routers.agentrouter.entrypoints=web"
      - "traefik.http.routers.agentrouter.priority=100"
      - "traefik.http.routers.agentrouter.middlewares=agentrouter-stripprefix"
      - "traefik.http.middlewares.agentrouter-stripprefix.stripprefix.prefixes=/agents"
      - "traefik.http.services.agentrouter.loadbalancer.server.port=3002"
    networks:
      - app-network
    volumes:
      - ./agentrouter/src:/app/src
      - ./agentrouter/package.json:/app/package.json
      - ./agentrouter/tsconfig.json:/app/tsconfig.json
      - ./agentrouter/tsconfig.build.json:/app/tsconfig.build.json
      - ./agentrouter/nest-cli.json:/app/nest-cli.json
    command: npm run start:dev

  client:
    build:
      context: ./client  # Path to your React app directory
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.priority=1"
      - "traefik.http.routers.client.rule=PathPrefix(`/`)"
      - "traefik.http.services.client.loadbalancer.server.port=80"  # Internal port of the React app
    networks:
      - app-network

networks:
  app-network:
